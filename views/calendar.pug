extends layout

block content

    #calendar.calendar.disable-selection
        .left-side
            .current-day.text-center
                h1.calendar-left-side-day
                .calendar-left-side-day-of-week

            .current-day-events
                div.ccs Current Consultation Slots:
                ul.current-day-events-list  

            .add-event-day

            if role == "student"
               
                h6#unqh6 Filter by Course: #{user} #{course} #{course1}
                        //- .sel.sel--dropdown

                        form.cont(method='POST' action='/coursefilter')
                            select(id="options" name="coursefilter" onchange="this.form.submit()")
                                option(value="all") View All
                                    for x in course
                                        if x == course1
                                            option(value=x selected="selected") #{x}
                                        else
                                            option(value=x) #{x}

            if role == "professor"
                form.cont(method='POST' action='/setconsult')
                    input(id="date" type="text" name="datetoday" value="1" hidden) 
                
                    h6 Select timeslot: #{user}

                    select(id="options" name="time")
                        option(value="8.00AM 8:30AM") 8.00AM - 8:30AM
                        option(value="8.30AM 9:00AM") 8.30AM - 9:00AM
                        option(value="9.00AM 9:30AM") 9.00AM - 9:30AM
                        option(value="9.30AM 10:00AM") 9.30AM - 10:00AM
                        option(value="10.00AM 10:30AM") 10.00AM - 10:30AM
                        option(value="10.30AM 11:00AM") 10.30AM - 11:00AM
                        option(value="11.00AM 11:30AM") 11.00AM - 11:30AM
                        option(value="11.30AM 12:00PM") 11.30AM - 12:00PM
                        option(value="12.00PM 12:30PM") 12.00PM - 12:30PM
                        option(value="12.30PM 1:00PM") 12.30PM - 1:00PM
                        option(value="1.00PM 1:30PM") 1.00PM - 1:30PM
                        option(value="1.30PM 2:00PM") 1.30PM - 2:00PM
                        option(value="2.00PM 2:30PM") 2.00PM - 2:30PM
                        option(value="2.30PM 3:00PM") 2.30PM - 3:00PM
                        option(value="3.00PM 3:30PM") 3.00PM - 3:30PM
                        option(value="3.30PM 4:00PM") 3.30PM - 4:00PM
                        option(value="4.00PM 4:30PM") 4.00PM - 4:30PM
                        option(value="4.30PM 5:00PM") 4.30PM - 5:00PM

                    //input.add-event-day-field(type='text' placeholder='Create an Event')
                    |&nbsp &nbsp &nbsp
                    button.btn.btn-primary(type='submit') Save Slot
                    //span.fa.fa-plus-circle.cursor-pointer.add-event-day-field-btn 
                    


        .right-side
            .text-right.calendar-change-year
                .calendar-change-year-slider
                    span.fa.fa-caret-left.cursor-pointer.calendar-change-year-slider-prev
                    span.calendar-current-year
                    span.fa.fa-caret-right.cursor-pointer.calendar-change-year-slider-next
                .calendar-month-list
                    ul.calendar-month
                .calendar-week-list
                    ul.calendar-week
                .calendar-day-list
                    ul.calendar-days

    link(rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto")
    link(rel="stylesheet" href="app/bower/font-awesome/css/font-awesome.min.css")
    link(rel="stylesheet" href="app/styles/all.css")

    script.  
         //set con also
        function test(){
            var date =  document.getElementById("date").value.split("-");
            var day = new Date(date[2],date[1],date[0],12,0,0,0);
            var nextWeek = new Date(day.getTime() + 7 * 24 * 60 * 60 * 1000);
            alert(nextWeek.getDate() + "/" + nextWeek.getMonth());
        }

        document.addEventListener('readystatechange', event => {
        if (event.target.readyState === "complete") {
            //alert("Now external resources are loaded too, like css,src etc... ");
            var date = "";
            var d = new Date();
            date = d.getDate() + "-" + d.getMonth() + "-" + d.getFullYear();
            document.getElementById("date").value = date;
            console.log(document.getElementById("date").value);
        }

        });

        const AVAILABLE_WEEK_DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        const localStorageName = 'calendar-events';

        class CALENDAR {
            constructor(options) {
                this.options = options;
                this.elements = {
                    days: this.getFirstElementInsideIdByClassName('calendar-days'),
                    week: this.getFirstElementInsideIdByClassName('calendar-week'),
                    month: this.getFirstElementInsideIdByClassName('calendar-month'),
                    year: this.getFirstElementInsideIdByClassName('calendar-current-year'),
                    eventList: this.getFirstElementInsideIdByClassName('current-day-events-list'),
                    eventField: this.getFirstElementInsideIdByClassName('add-event-day-field'),
                    eventAddBtn: this.getFirstElementInsideIdByClassName('add-event-day-field-btn'),
                    currentDay: this.getFirstElementInsideIdByClassName('calendar-left-side-day'),
                    currentWeekDay: this.getFirstElementInsideIdByClassName('calendar-left-side-day-of-week'),
                    prevYear: this.getFirstElementInsideIdByClassName('calendar-change-year-slider-prev'),
                    nextYear: this.getFirstElementInsideIdByClassName('calendar-change-year-slider-next')
                };
                
                //localStorage.clear();
                //console.log(#{test});
                //console.log(JSON.parse(localStorage.getItem(localStorageName)));
                //this.eventList = {"11/10/2019": ["test","damn","gg"]};
            
                
                console.log(JSON.parse(localStorage.getItem(localStorageName)));
                var events = {};
                var newdict = "#{dict}";
                var username = "#{user}";
                var role = "#{role}";
                var newdict2 = newdict.replace(/&quot;/g, '"');
                var newdict3 = newdict2.replace(/-/g, "/");
                

                var dict = JSON.parse(newdict3);
                console.log(dict);
                for(var x in dict){
                    //x is dateno, y is conno.
                    for(var y in dict[x]){
                    //skip if is date element
                    if(y=="date"){
                        continue;
                    }else{
                      if(role=="student"){
                            if(!(dict[x][y]["booked"]=="1" && dict[x][y]["bookedby"]!=username)){

                                if(dict[x][y]["bookedby"]==username){
                                    if(events[dict[x]["date"]]==null){
                                        events[dict[x]["date"]] = ["1 " + x + " " + y, dict[x][y]["course"] + " (" + dict[x][y]["prof"] + ") : " + dict[x][y]["timefrom"] + " - " +  dict[x][y]["timeto"]] ;
                                    }else{
                                        events[dict[x]["date"]].push("1 " + x + " " + y, dict[x][y]["course"] + " (" + dict[x][y]["prof"] + ") : " + dict[x][y]["timefrom"] + " - " +  dict[x][y]["timeto"]);
                                    }
                                }else{
                                    if(events[dict[x]["date"]]==null){
                                        events[dict[x]["date"]] = ["0 " + x + " " + y, dict[x][y]["course"] + " (" + dict[x][y]["prof"] + ") : " + dict[x][y]["timefrom"] + " - " +  dict[x][y]["timeto"]] ;
                                    }else{
                                        events[dict[x]["date"]].push("0 " + x + " " + y, dict[x][y]["course"] + " (" + dict[x][y]["prof"] + ") : " + dict[x][y]["timefrom"] + " - " +  dict[x][y]["timeto"]) ;
                                    }
                                
                                }

                            }
                      }else{
                          //is professor, get course code?
                          if(dict[x][y]["booked"]=="0"){
                            if(events[dict[x]["date"]]==null){
                                    events[dict[x]["date"]] = ["0 " + x + " " + y, dict[x][y]["course"] +  " : " + dict[x][y]["timefrom"] + " - " +  dict[x][y]["timeto"]] ;
                                }else{
                                    events[dict[x]["date"]].push("0 " + x + " " + y, dict[x][y]["course"] + " : " + dict[x][y]["timefrom"] + " - " +  dict[x][y]["timeto"]) ;
                                }
                          }else{
                             if(events[dict[x]["date"]]==null){
                                    events[dict[x]["date"]] = ["1 " + x + " " + y, dict[x][y]["course"] +  " : " + dict[x][y]["timefrom"] + " - " +  dict[x][y]["timeto"] + " (Booked by " +  dict[x][y]["bookedby"] + ")"] ;
                                }else{
                                    events[dict[x]["date"]].push("1 " + x + " " + y, dict[x][y]["course"] + " : " + dict[x][y]["timefrom"] + " - " +  dict[x][y]["timeto"] + " (Booked by " +  dict[x][y]["bookedby"] + ")") ;
                                }

                          }
                      }
                
                    }
                    }   
                }
            console.log(events);
            this.eventList = events;

                //JSON.parse(localStorage.getItem(localStorageName)) || {};

                this.date = +new Date();
                this.options.maxDays = 37;
                this.init();
            }

        
            init() {
                if (!this.options.id) return false;
                this.eventsTrigger();
                this.drawAll();
            }

            // draw Methods
            drawAll() {
                this.drawWeekDays();
                this.drawMonths();
                this.drawDays();
                this.drawYearAndCurrentDay();
                this.drawEvents();

            }

            drawEvents() {
                let calendar = this.getCalendar();
                let eventList = this.eventList[calendar.active.formatted] || ['No slots on this day'];
                let eventTemplate = "";
                var username = "#{user}";
                var bookedbyuser = false;
                var dateno = "";
                var conno = "";
                //student
                if(role=="student"){
                    for(var x=0;x<eventList.length;x++){
                
                        if(x%2==0){
                            if(eventList[x].charAt(0)==1){
                                bookedbyuser = true;
                            }
                            var res = eventList[x].split(" ");
                            dateno = res[1];
                            conno = res[2];

                        }else{
                        
                                if(bookedbyuser){
                                    eventTemplate += `<li class="booked" id="${dateno} ${conno}">&nbsp&nbsp ${eventList[x]} &nbsp&nbsp
                                    <form method="POST" action="/cancelcon">
                                    <input id="cancel" type="text" name="dateno1" value="${dateno} ${conno}" hidden></input>
                                    <input type="submit" value="Cancel" class='special' style='background: white; color:#3C677B;'></input></form></li>
                                    `;
                                    bookedbyuser = false;

                                }else{

                                eventTemplate += `<li id="${dateno} ${conno}" class='booklist'>&nbsp&nbsp ${eventList[x]} &nbsp&nbsp
                                    <form method="POST" action="/bookcon">
                                    <input id="lol" type="text" name="dateno" value="${dateno} ${conno}" hidden></input>   
                                    <input type="submit" value="Book" class='special'></input></form></li>
                                    `; 

                                }

                            dateno = "";


                            }   
                        

                    }   
            }else{
                  //is professor 
                 for(var x=0;x<eventList.length;x++){
                
                        if(x%2==0){
                            var res = eventList[x].split(" ");
                            dateno = res[1];
                            conno = res[2];

                        }else{
                        
                                eventTemplate += `<li id="${dateno} ${conno}">&nbsp&nbsp ${eventList[x]} &nbsp&nbsp
                               <form method="POST" action="/deletecon">
                                <input id="cancel" type="text" name="dateno1" value="${dateno} ${conno}" hidden></input>
                               <input type="submit" value="Remove Slot"></input></form></li>
                                `;


                            }   
                        

                    }   










            }


                this.elements.eventList.innerHTML = eventTemplate;
            }

            drawYearAndCurrentDay() {
                let calendar = this.getCalendar();
                this.elements.year.innerHTML = calendar.active.year;
                this.elements.currentDay.innerHTML = calendar.active.day;
                this.elements.currentWeekDay.innerHTML = AVAILABLE_WEEK_DAYS[calendar.active.week];
            }

            drawDays() {
                let calendar = this.getCalendar();

                let latestDaysInPrevMonth = this.range(calendar.active.startWeek).map((day, idx) => {
                    return {
                        dayNumber: this.countOfDaysInMonth(calendar.pMonth) - idx,
                        month: new Date(calendar.pMonth).getMonth(),
                        year: new Date(calendar.pMonth).getFullYear(),
                        currentMonth: false
                    }
                }).reverse();


                let daysInActiveMonth = this.range(calendar.active.days).map((day, idx) => {
                    let dayNumber = idx + 1;
                    let today = new Date();
                    return {
                        dayNumber,
                        today: today.getDate() === dayNumber && today.getFullYear() === calendar.active.year && today.getMonth() === calendar.active.month,
                        month: calendar.active.month,
                        year: calendar.active.year,
                        selected: calendar.active.day === dayNumber,
                        currentMonth: true
                    }
                });


                let countOfDays = this.options.maxDays - (latestDaysInPrevMonth.length + daysInActiveMonth.length);
                let daysInNextMonth = this.range(countOfDays).map((day, idx) => {
                    return {
                        dayNumber: idx + 1,
                        month: new Date(calendar.nMonth).getMonth(),
                        year: new Date(calendar.nMonth).getFullYear(),
                        currentMonth: false
                    }
                });

                let days = [...latestDaysInPrevMonth, ...daysInActiveMonth, ...daysInNextMonth];

                days = days.map(day => {
                    let newDayParams = day;
                    let formatted = this.getFormattedDate(new Date(`${Number(day.month) + 1}/${day.dayNumber}/${day.year}`));
                    newDayParams.hasEvent = this.eventList[formatted];
                    return newDayParams;
                });

                let daysTemplate = "";
                days.forEach(day => {
                    daysTemplate += `<li class="${day.currentMonth ? '' : 'another-month'}${day.today ? ' active-day ' : ''}${day.selected ? 'selected-day' : ''}${day.hasEvent ? ' event-day' : ''}" data-day="${day.dayNumber}" data-month="${day.month}" data-year="${day.year}"></li>`
                });

                this.elements.days.innerHTML = daysTemplate;
            }

            drawMonths() {
                let availableMonths = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                let monthTemplate = "";
                let calendar = this.getCalendar();
                availableMonths.forEach((month, idx) => {
                    monthTemplate += `<li class="${idx === calendar.active.month ? 'active' : ''}" data-month="${idx}">${month}</li>`
                });

                this.elements.month.innerHTML = monthTemplate;
            }

            drawWeekDays() {
                let weekTemplate = "";
                AVAILABLE_WEEK_DAYS.forEach(week => {
                    weekTemplate += `<li>${week.slice(0, 3)}</li>`
                });

                this.elements.week.innerHTML = weekTemplate;
            }

            // Service methods
            eventsTrigger() {
                this.elements.prevYear.addEventListener('click', e => {
                    let calendar = this.getCalendar();
                    this.updateTime(calendar.pYear);
                    this.drawAll()
                });

                this.elements.nextYear.addEventListener('click', e => {
                    let calendar = this.getCalendar();
                    this.updateTime(calendar.nYear);
                    this.drawAll()
                    console.log(calendar.nYear);
                });

                this.elements.month.addEventListener('click', e => {
                    let calendar = this.getCalendar();
                    let month = e.srcElement.getAttribute('data-month');
                    if (!month || calendar.active.month == month) return false;

                    let newMonth = new Date(calendar.active.tm).setMonth(month);
                    this.updateTime(newMonth);
                    this.drawAll()
                    console.log(month);
                    var prevday = document.getElementById("date").value.split("-")[0];
                    var d = new Date();
                    document.getElementById("date").value = prevday + "-" + month + "-" + d.getFullYear();
                    console.log("New mth: " + document.getElementById("date").value);
                });


                this.elements.days.addEventListener('click', e => {
                    let element = e.srcElement;
                    let day = element.getAttribute('data-day');
                    let month = element.getAttribute('data-month');
                    let year = element.getAttribute('data-year');
                    if (!day) return false;
                    let strDate = `${Number(month) + 1}/${day}/${year}`;
                    this.updateTime(strDate);
                    this.drawAll()
                    console.log(day);
                    var prevmth = document.getElementById("date").value.split("-")[1];   
                    var d = new Date();
                    document.getElementById("date").value = day + "-" + prevmth  + "-" + d.getFullYear();
                    console.log("New mth: " + document.getElementById("date").value);
                });

                //store prev month or day when change...
                
            

            }


            updateTime(time) {
                this.date = +new Date(time);
            }

            getCalendar() {
                let time = new Date(this.date);

                return {
                    active: {
                        days: this.countOfDaysInMonth(time),
                        startWeek: this.getStartedDayOfWeekByTime(time),
                        day: time.getDate(),
                        week: time.getDay(),
                        month: time.getMonth(),
                        year: time.getFullYear(),
                        formatted: this.getFormattedDate(time),
                        tm: +time
                    },
                    pMonth: new Date(time.getFullYear(), time.getMonth() - 1, 1),
                    nMonth: new Date(time.getFullYear(), time.getMonth() + 1, 1),
                    pYear: new Date(new Date(time).getFullYear() - 1, 0, 1),
                    nYear: new Date(new Date(time).getFullYear() + 1, 0, 1)
                }
            }

            countOfDaysInMonth(time) {
                let date = this.getMonthAndYear(time);
                return new Date(date.year, date.month + 1, 0).getDate();
            }

            getStartedDayOfWeekByTime(time) {
                let date = this.getMonthAndYear(time);
                return new Date(date.year, date.month, 1).getDay();
            }

            getMonthAndYear(time) {
                let date = new Date(time);
                return {
                    year: date.getFullYear(),
                    month: date.getMonth()
                }
            }

            getFormattedDate(date) {
                return `${date.getDate()}/${date.getMonth()}/${date.getFullYear()}`;
            }

            range(number) {
                return new Array(number).fill().map((e, i) => i);
            }

            getFirstElementInsideIdByClassName(className) {
                return document.getElementById(this.options.id).getElementsByClassName(className)[0];
            }
        }


        (function () {
            new CALENDAR({
                id: "calendar"
            })
        })();

    script.
        $('.sel').each(function() {
            $(this).children('select').css('display', 'none');

            var $current = $(this);

            $(this).find('option').each(function(i) {
                if (i == 0) {
                    $current.prepend($('<div>', {
                        class: $current.attr('class').replace(/sel/g, 'sel__box')
                    }));

                    var placeholder = $(this).text();
                    $current.prepend($('<span>', {
                        class: $current.attr('class').replace(/sel/g, 'sel__placeholder'),
                        text: placeholder,
                        'data-placeholder': placeholder
                    }));

                    return;
                }

                $current.children('div').append($('<span>', {
                    class: $current.attr('class').replace(/sel/g, 'sel__box__options'),
                    text: $(this).text()
                }));
            });
        });

        // Toggling the `.active` state on the `.sel`.
        $('.sel').click(function() {
            $(this).toggleClass('active');
        });

        // Toggling the `.selected` state on the options.
        $('.sel__box__options').click(function() {
            var txt = $(this).text();
            var index = $(this).index();

            $(this).siblings('.sel__box__options').removeClass('selected');
            $(this).addClass('selected');

            var $currentSel = $(this).closest('.sel');
            $currentSel.children('.sel__placeholder').text(txt);
            $currentSel.children('select').prop('selectedIndex', index + 1);
        });
