extends layout

block content

    #calendar.calendar.disable-selection
        .left-side
            .current-day.text-center
                h1.calendar-left-side-day
                .calendar-left-side-day-of-week
            .current-day-events
                div Current Consultation slots:
                ul.current-day-events-list
            .add-event-day
            form.cont(method='POST' action='/setconsult')
        
                input(id="date" type="text" name="datetoday" value="1" hidden) 
                h6 From: #{user}
                button.btn.btn-primary(type='submit') Save Slot
                select(id="options" name="timefrom")
                    option(value="800") 8.00AM
                    option(value="830") 8.30AM
                    option(value="900") 9.00AM
                    option(value="930") 9.30AM
                    option(value="1000") 10.00AM
                //input.add-event-day-field(type='text' placeholder='Create an Event')
                h6 To: 
                select(id="datetoday" name="timeto")
                    option(value="800") 8.00AM
                    option(value="830") 8.30AM
                    option(value="900") 9.00AM
                    option(value="930") 9.30AM
                    option(value="1000") 10.00AM
                |&nbsp &nbsp &nbsp
               
                span.fa.fa-plus-circle.cursor-pointer.add-event-day-field-btn 
                
        .right-side
            .text-right.calendar-change-year
                .calendar-change-year-slider
                    span.fa.fa-caret-left.cursor-pointer.calendar-change-year-slider-prev
                    span.calendar-current-year
                    span.fa.fa-caret-right.cursor-pointer.calendar-change-year-slider-next
                .calendar-month-list
                    ul.calendar-month
                .calendar-week-list
                    ul.calendar-week
                .calendar-day-list
                    ul.calendar-days

    link(rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto")
    link(rel="stylesheet" href="app/bower/font-awesome/css/font-awesome.min.css")
    link(rel="stylesheet" href="app/styles/all.css")

    script.  

        function bookcon(ele){

            //alert(ele.parentElement.id);
            var lol = document.getElementById("lol");
            lol.value = ele.parentElement.parentElement.id;
            console.log(lol.value);
        }

        function cancelcon(ele){

            var lol = document.getElementById("cancel");
            lol.value = ele.parentElement.parentElement.id;
            console.log(lol.value);


        }

        document.addEventListener('readystatechange', event => {
        if (event.target.readyState === "complete") {
            //alert("Now external resources are loaded too, like css,src etc... ");
            var date = "";
            var d = new Date();
            date = d.getDate() + "-" + d.getMonth() + "-" + d.getFullYear();
            document.getElementById("date").value = date;
            console.log(document.getElementById("date").value);
        }

        });

        const AVAILABLE_WEEK_DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        const localStorageName = 'calendar-events';

        class CALENDAR {
            constructor(options) {
                this.options = options;
                this.elements = {
                    days: this.getFirstElementInsideIdByClassName('calendar-days'),
                    week: this.getFirstElementInsideIdByClassName('calendar-week'),
                    month: this.getFirstElementInsideIdByClassName('calendar-month'),
                    year: this.getFirstElementInsideIdByClassName('calendar-current-year'),
                    eventList: this.getFirstElementInsideIdByClassName('current-day-events-list'),
                    eventField: this.getFirstElementInsideIdByClassName('add-event-day-field'),
                    eventAddBtn: this.getFirstElementInsideIdByClassName('add-event-day-field-btn'),
                    currentDay: this.getFirstElementInsideIdByClassName('calendar-left-side-day'),
                    currentWeekDay: this.getFirstElementInsideIdByClassName('calendar-left-side-day-of-week'),
                    prevYear: this.getFirstElementInsideIdByClassName('calendar-change-year-slider-prev'),
                    nextYear: this.getFirstElementInsideIdByClassName('calendar-change-year-slider-next')
                };
                
                //localStorage.clear();
                //console.log(#{test});
                //console.log(JSON.parse(localStorage.getItem(localStorageName)));
                //this.eventList = {"11/10/2019": ["test","damn","gg"]};
            
                
                console.log(JSON.parse(localStorage.getItem(localStorageName)));
                var events = {};
                var newdict = "#{dict}";
                var username = "#{user}";
                var newdict2 = newdict.replace(/&quot;/g, '"');
                var newdict3 = newdict2.replace(/-/g, "/");
                

                var dict = JSON.parse(newdict3);
                console.log(dict);
                for(var x in dict){
                    //for(var y in dict[x])
                    //if slot is booked and not by user, don't show
                    if(!(dict[x]["con1"]["booked"]=="1" && dict[x]["con1"]["bookedby"]!=username)){
                
                        if(dict[x]["con1"]["bookedby"]==username){
                        
                            events[dict[x]["date"]] = ["1 " + x, dict[x]["con1"]["course"] + " (" + dict[x]["con1"]["prof"] + ") : " + dict[x]["con1"]["timefrom"] + " - " +  dict[x]["con1"]["timeto"]] ;
                        }else{
                             events[dict[x]["date"]] = ["0 " + x, dict[x]["con1"]["course"] + " (" + dict[x]["con1"]["prof"] + ") : " + dict[x]["con1"]["timefrom"] + " - " +  dict[x]["con1"]["timeto"]] ;
                        }
                    
                    }
                
                }
            console.log(events);
            this.eventList = events;

                //JSON.parse(localStorage.getItem(localStorageName)) || {};

                this.date = +new Date();
                this.options.maxDays = 37;
                this.init();
            }

        
            init() {
                if (!this.options.id) return false;
                this.eventsTrigger();
                this.drawAll();
            }

            // draw Methods
            drawAll() {
                this.drawWeekDays();
                this.drawMonths();
                this.drawDays();
                this.drawYearAndCurrentDay();
                this.drawEvents();

            }

            drawEvents() {
                let calendar = this.getCalendar();
                let eventList = this.eventList[calendar.active.formatted] || ['No slots on this day'];
                let eventTemplate = "";
                //add logic for booked before. button should say unbook.
                var bookedbyuser = false;
                var dateno = "";

                for(var x=0;x<eventList.length;x++){
                
                    
                    if(x%2==0){
                        if(eventList[x].charAt(0)==1){
                            bookedbyuser = true;
                        }
                        var res = eventList[x].split(" ");
                        dateno = res[1];

                    }else{
                        

                        //need to find another way to setdayno, another arr element?
                        if(bookedbyuser){
                            eventTemplate += `<li id="${dateno}">&nbsp&nbsp ${eventList[x]} &nbsp&nbsp
                            <form method="POST" action="/cancelcon">
                            <input id="cancel" type="text" name="dateno" value="date" hidden></input>
                            <input type="submit" value="Cancel" onclick="cancelcon(this);"></input></form></li>
                            `;
                            bookedbyuser = false;

                        }else{

                           eventTemplate += `<li id="${dateno}">&nbsp&nbsp ${eventList[x]} &nbsp&nbsp
                            <form method="POST" action="/bookcon">
                            <input id="lol" type="text" name="dateno" value="date" hidden></input>
                            <input type="submit" value="Book" onclick="bookcon(this);"></input></form></li>
                            `; 

                        }

                        dateno = "";

                    }
                    

                }



                this.elements.eventList.innerHTML = eventTemplate;
            }

            drawYearAndCurrentDay() {
                let calendar = this.getCalendar();
                this.elements.year.innerHTML = calendar.active.year;
                this.elements.currentDay.innerHTML = calendar.active.day;
                this.elements.currentWeekDay.innerHTML = AVAILABLE_WEEK_DAYS[calendar.active.week];
            }

            drawDays() {
                let calendar = this.getCalendar();

                let latestDaysInPrevMonth = this.range(calendar.active.startWeek).map((day, idx) => {
                    return {
                        dayNumber: this.countOfDaysInMonth(calendar.pMonth) - idx,
                        month: new Date(calendar.pMonth).getMonth(),
                        year: new Date(calendar.pMonth).getFullYear(),
                        currentMonth: false
                    }
                }).reverse();


                let daysInActiveMonth = this.range(calendar.active.days).map((day, idx) => {
                    let dayNumber = idx + 1;
                    let today = new Date();
                    return {
                        dayNumber,
                        today: today.getDate() === dayNumber && today.getFullYear() === calendar.active.year && today.getMonth() === calendar.active.month,
                        month: calendar.active.month,
                        year: calendar.active.year,
                        selected: calendar.active.day === dayNumber,
                        currentMonth: true
                    }
                });


                let countOfDays = this.options.maxDays - (latestDaysInPrevMonth.length + daysInActiveMonth.length);
                let daysInNextMonth = this.range(countOfDays).map((day, idx) => {
                    return {
                        dayNumber: idx + 1,
                        month: new Date(calendar.nMonth).getMonth(),
                        year: new Date(calendar.nMonth).getFullYear(),
                        currentMonth: false
                    }
                });

                let days = [...latestDaysInPrevMonth, ...daysInActiveMonth, ...daysInNextMonth];

                days = days.map(day => {
                    let newDayParams = day;
                    let formatted = this.getFormattedDate(new Date(`${Number(day.month) + 1}/${day.dayNumber}/${day.year}`));
                    newDayParams.hasEvent = this.eventList[formatted];
                    return newDayParams;
                });

                let daysTemplate = "";
                days.forEach(day => {
                    daysTemplate += `<li class="${day.currentMonth ? '' : 'another-month'}${day.today ? ' active-day ' : ''}${day.selected ? 'selected-day' : ''}${day.hasEvent ? ' event-day' : ''}" data-day="${day.dayNumber}" data-month="${day.month}" data-year="${day.year}"></li>`
                });

                this.elements.days.innerHTML = daysTemplate;
            }

            drawMonths() {
                let availableMonths = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                let monthTemplate = "";
                let calendar = this.getCalendar();
                availableMonths.forEach((month, idx) => {
                    monthTemplate += `<li class="${idx === calendar.active.month ? 'active' : ''}" data-month="${idx}">${month}</li>`
                });

                this.elements.month.innerHTML = monthTemplate;
            }

            drawWeekDays() {
                let weekTemplate = "";
                AVAILABLE_WEEK_DAYS.forEach(week => {
                    weekTemplate += `<li>${week.slice(0, 3)}</li>`
                });

                this.elements.week.innerHTML = weekTemplate;
            }

            // Service methods
            eventsTrigger() {
                this.elements.prevYear.addEventListener('click', e => {
                    let calendar = this.getCalendar();
                    this.updateTime(calendar.pYear);
                    this.drawAll()
                });

                this.elements.nextYear.addEventListener('click', e => {
                    let calendar = this.getCalendar();
                    this.updateTime(calendar.nYear);
                    this.drawAll()
                    console.log(calendar.nYear);
                });

                this.elements.month.addEventListener('click', e => {
                    let calendar = this.getCalendar();
                    let month = e.srcElement.getAttribute('data-month');
                    if (!month || calendar.active.month == month) return false;

                    let newMonth = new Date(calendar.active.tm).setMonth(month);
                    this.updateTime(newMonth);
                    this.drawAll()
                    console.log(month);
                    var prevday = document.getElementById("date").value.split("-")[0];
                    var d = new Date();
                    document.getElementById("date").value = prevday + "-" + month + "-" + d.getFullYear();
                    console.log("New mth: " + document.getElementById("date").value);
                });


                this.elements.days.addEventListener('click', e => {
                    let element = e.srcElement;
                    let day = element.getAttribute('data-day');
                    let month = element.getAttribute('data-month');
                    let year = element.getAttribute('data-year');
                    if (!day) return false;
                    let strDate = `${Number(month) + 1}/${day}/${year}`;
                    this.updateTime(strDate);
                    this.drawAll()
                    console.log(day);
                    var prevmth = document.getElementById("date").value.split("-")[1];
                    var d = new Date();
                    document.getElementById("date").value = day + "-" + prevmth  + "-" + d.getFullYear();
                    console.log("New mth: " + document.getElementById("date").value);
                });

                //store prev month or day when change...

                this.elements.eventAddBtn.addEventListener('click', e => {
                    let fieldValue = this.elements.eventField.value;
                    if (!fieldValue) return false;
                    let dateFormatted = this.getFormattedDate(new Date(this.date));
                    if (!this.eventList[dateFormatted]) this.eventList[dateFormatted] = [];
                    this.eventList[dateFormatted].push(fieldValue);
                
                    localStorage.setItem(localStorageName, JSON.stringify(this.eventList));
                    this.elements.eventField.value = '';
                    this.drawAll()
                });


            }


            updateTime(time) {
                this.date = +new Date(time);
            }

            getCalendar() {
                let time = new Date(this.date);

                return {
                    active: {
                        days: this.countOfDaysInMonth(time),
                        startWeek: this.getStartedDayOfWeekByTime(time),
                        day: time.getDate(),
                        week: time.getDay(),
                        month: time.getMonth(),
                        year: time.getFullYear(),
                        formatted: this.getFormattedDate(time),
                        tm: +time
                    },
                    pMonth: new Date(time.getFullYear(), time.getMonth() - 1, 1),
                    nMonth: new Date(time.getFullYear(), time.getMonth() + 1, 1),
                    pYear: new Date(new Date(time).getFullYear() - 1, 0, 1),
                    nYear: new Date(new Date(time).getFullYear() + 1, 0, 1)
                }
            }

            countOfDaysInMonth(time) {
                let date = this.getMonthAndYear(time);
                return new Date(date.year, date.month + 1, 0).getDate();
            }

            getStartedDayOfWeekByTime(time) {
                let date = this.getMonthAndYear(time);
                return new Date(date.year, date.month, 1).getDay();
            }

            getMonthAndYear(time) {
                let date = new Date(time);
                return {
                    year: date.getFullYear(),
                    month: date.getMonth()
                }
            }

            getFormattedDate(date) {
                return `${date.getDate()}/${date.getMonth()}/${date.getFullYear()}`;
            }

            range(number) {
                return new Array(number).fill().map((e, i) => i);
            }

            getFirstElementInsideIdByClassName(className) {
                return document.getElementById(this.options.id).getElementsByClassName(className)[0];
            }
        }


        (function () {
            new CALENDAR({
                id: "calendar"
            })
        })();